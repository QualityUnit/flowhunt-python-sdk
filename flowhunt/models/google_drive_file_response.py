# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleDriveFileResponse(BaseModel):
    """
    GoogleDriveFileResponse
    """ # noqa: E501
    document_id: StrictStr = Field(description="Document ID")
    name: StrictStr = Field(description="Name")
    kind: StrictStr = Field(description="Kind of document retrieved")
    viewed_by_me: StrictBool = Field(description="Viewed by me")
    created_time: StrictStr = Field(description="Created time")
    mime_type: StrictStr = Field(description="Mime type")
    has_thumbnail: StrictBool = Field(description="Has thumbnail")
    thumbnail_link: Optional[StrictStr] = None
    size: StrictStr = Field(description="Size")
    icon_link: Optional[StrictStr] = None
    web_view_link: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["document_id", "name", "kind", "viewed_by_me", "created_time", "mime_type", "has_thumbnail", "thumbnail_link", "size", "icon_link", "web_view_link"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleDriveFileResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if thumbnail_link (nullable) is None
        # and model_fields_set contains the field
        if self.thumbnail_link is None and "thumbnail_link" in self.model_fields_set:
            _dict['thumbnail_link'] = None

        # set to None if icon_link (nullable) is None
        # and model_fields_set contains the field
        if self.icon_link is None and "icon_link" in self.model_fields_set:
            _dict['icon_link'] = None

        # set to None if web_view_link (nullable) is None
        # and model_fields_set contains the field
        if self.web_view_link is None and "web_view_link" in self.model_fields_set:
            _dict['web_view_link'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleDriveFileResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "document_id": obj.get("document_id"),
            "name": obj.get("name"),
            "kind": obj.get("kind"),
            "viewed_by_me": obj.get("viewed_by_me"),
            "created_time": obj.get("created_time"),
            "mime_type": obj.get("mime_type"),
            "has_thumbnail": obj.get("has_thumbnail"),
            "thumbnail_link": obj.get("thumbnail_link"),
            "size": obj.get("size"),
            "icon_link": obj.get("icon_link"),
            "web_view_link": obj.get("web_view_link")
        })
        return _obj


