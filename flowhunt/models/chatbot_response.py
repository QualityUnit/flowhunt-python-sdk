# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flowhunt.models.chatbot_status import ChatbotStatus
from typing import Optional, Set
from typing_extensions import Self

class ChatbotResponse(BaseModel):
    """
    ChatbotResponse
    """ # noqa: E501
    workspace_id: StrictStr = Field(description="Workspace id")
    chatbot_id: StrictStr = Field(description="Chatbot id")
    title: StrictStr = Field(description="Tenant name")
    description: Optional[StrictStr] = None
    flow_id: StrictStr = Field(description="Flow ID")
    status: Optional[ChatbotStatus]
    url_suffix: Optional[StrictStr] = None
    theme: Optional[StrictStr] = None
    max_window_size: Optional[StrictStr] = None
    msg_rpm: Optional[StrictInt] = None
    msg_ip_rpm: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["workspace_id", "chatbot_id", "title", "description", "flow_id", "status", "url_suffix", "theme", "max_window_size", "msg_rpm", "msg_ip_rpm"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ChatbotResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if url_suffix (nullable) is None
        # and model_fields_set contains the field
        if self.url_suffix is None and "url_suffix" in self.model_fields_set:
            _dict['url_suffix'] = None

        # set to None if theme (nullable) is None
        # and model_fields_set contains the field
        if self.theme is None and "theme" in self.model_fields_set:
            _dict['theme'] = None

        # set to None if max_window_size (nullable) is None
        # and model_fields_set contains the field
        if self.max_window_size is None and "max_window_size" in self.model_fields_set:
            _dict['max_window_size'] = None

        # set to None if msg_rpm (nullable) is None
        # and model_fields_set contains the field
        if self.msg_rpm is None and "msg_rpm" in self.model_fields_set:
            _dict['msg_rpm'] = None

        # set to None if msg_ip_rpm (nullable) is None
        # and model_fields_set contains the field
        if self.msg_ip_rpm is None and "msg_ip_rpm" in self.model_fields_set:
            _dict['msg_ip_rpm'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ChatbotResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "workspace_id": obj.get("workspace_id"),
            "chatbot_id": obj.get("chatbot_id"),
            "title": obj.get("title"),
            "description": obj.get("description"),
            "flow_id": obj.get("flow_id"),
            "status": obj.get("status"),
            "url_suffix": obj.get("url_suffix"),
            "theme": obj.get("theme"),
            "max_window_size": obj.get("max_window_size"),
            "msg_rpm": obj.get("msg_rpm"),
            "msg_ip_rpm": obj.get("msg_ip_rpm")
        })
        return _obj


