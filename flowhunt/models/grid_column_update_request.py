# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flowhunt.models.column_data_type import ColumnDataType
from flowhunt.models.column_executor_type import ColumnExecutorType
from typing import Optional, Set
from typing_extensions import Self

class GridColumnUpdateRequest(BaseModel):
    """
    GridColumnUpdateRequest
    """ # noqa: E501
    name: Optional[StrictStr] = None
    position: Optional[StrictInt] = None
    data_type: Optional[ColumnDataType] = None
    data_type_options: Optional[StrictStr] = None
    input_columns: Optional[List[StrictStr]] = None
    executor_type: Optional[ColumnExecutorType] = None
    executor_flow_id: Optional[StrictStr] = None
    executor_input_template: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["name", "position", "data_type", "data_type_options", "input_columns", "executor_type", "executor_flow_id", "executor_input_template"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GridColumnUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if position (nullable) is None
        # and model_fields_set contains the field
        if self.position is None and "position" in self.model_fields_set:
            _dict['position'] = None

        # set to None if data_type (nullable) is None
        # and model_fields_set contains the field
        if self.data_type is None and "data_type" in self.model_fields_set:
            _dict['data_type'] = None

        # set to None if data_type_options (nullable) is None
        # and model_fields_set contains the field
        if self.data_type_options is None and "data_type_options" in self.model_fields_set:
            _dict['data_type_options'] = None

        # set to None if input_columns (nullable) is None
        # and model_fields_set contains the field
        if self.input_columns is None and "input_columns" in self.model_fields_set:
            _dict['input_columns'] = None

        # set to None if executor_type (nullable) is None
        # and model_fields_set contains the field
        if self.executor_type is None and "executor_type" in self.model_fields_set:
            _dict['executor_type'] = None

        # set to None if executor_flow_id (nullable) is None
        # and model_fields_set contains the field
        if self.executor_flow_id is None and "executor_flow_id" in self.model_fields_set:
            _dict['executor_flow_id'] = None

        # set to None if executor_input_template (nullable) is None
        # and model_fields_set contains the field
        if self.executor_input_template is None and "executor_input_template" in self.model_fields_set:
            _dict['executor_input_template'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GridColumnUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "position": obj.get("position"),
            "data_type": obj.get("data_type"),
            "data_type_options": obj.get("data_type_options"),
            "input_columns": obj.get("input_columns"),
            "executor_type": obj.get("executor_type"),
            "executor_flow_id": obj.get("executor_flow_id"),
            "executor_input_template": obj.get("executor_input_template")
        })
        return _obj


