# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from flowhunt.models.grig_cell import GrigCell
from typing import Optional, Set
from typing_extensions import Self

class GridRowResponse(BaseModel):
    """
    GridRowResponse
    """ # noqa: E501
    workspace_id: StrictStr = Field(description="Workspace ID")
    grid_id: StrictStr = Field(description="Grid ID")
    row_id: StrictStr = Field(description="Row ID")
    created: Union[StrictFloat, StrictInt] = Field(description="Created timestamp")
    cells: Optional[List[GrigCell]] = None
    __properties: ClassVar[List[str]] = ["workspace_id", "grid_id", "row_id", "created", "cells"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GridRowResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in cells (list)
        _items = []
        if self.cells:
            for _item_cells in self.cells:
                if _item_cells:
                    _items.append(_item_cells.to_dict())
            _dict['cells'] = _items
        # set to None if cells (nullable) is None
        # and model_fields_set contains the field
        if self.cells is None and "cells" in self.model_fields_set:
            _dict['cells'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GridRowResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "workspace_id": obj.get("workspace_id"),
            "grid_id": obj.get("grid_id"),
            "row_id": obj.get("row_id"),
            "created": obj.get("created"),
            "cells": [GrigCell.from_dict(_item) for _item in obj["cells"]] if obj.get("cells") is not None else None
        })
        return _obj


