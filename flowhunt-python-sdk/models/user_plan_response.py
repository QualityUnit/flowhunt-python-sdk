# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from flowhunt-python-sdk.models.subscription_plan import SubscriptionPlan
from typing import Optional, Set
from typing_extensions import Self

class UserPlanResponse(BaseModel):
    """
    UserPlanResponse
    """ # noqa: E501
    product_id: Optional[StrictStr]
    price_amount: StrictInt
    price_currency: StrictStr
    last_renewal_date: Optional[datetime] = None
    monthly_topup_credits: StrictInt
    trial_end_date: Optional[datetime] = None
    subscription_plan: SubscriptionPlan
    __properties: ClassVar[List[str]] = ["product_id", "price_amount", "price_currency", "last_renewal_date", "monthly_topup_credits", "trial_end_date", "subscription_plan"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserPlanResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if product_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_id is None and "product_id" in self.model_fields_set:
            _dict['product_id'] = None

        # set to None if last_renewal_date (nullable) is None
        # and model_fields_set contains the field
        if self.last_renewal_date is None and "last_renewal_date" in self.model_fields_set:
            _dict['last_renewal_date'] = None

        # set to None if trial_end_date (nullable) is None
        # and model_fields_set contains the field
        if self.trial_end_date is None and "trial_end_date" in self.model_fields_set:
            _dict['trial_end_date'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserPlanResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "product_id": obj.get("product_id"),
            "price_amount": obj.get("price_amount"),
            "price_currency": obj.get("price_currency"),
            "last_renewal_date": obj.get("last_renewal_date"),
            "monthly_topup_credits": obj.get("monthly_topup_credits"),
            "trial_end_date": obj.get("trial_end_date"),
            "subscription_plan": obj.get("subscription_plan")
        })
        return _obj


