# coding: utf-8

"""
    FlowHunt

    FlowHunt API

    The version of the OpenAPI document: 2.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from flowhunt-python-sdk.models.api_method import ApiMethod
from typing import Optional, Set
from typing_extensions import Self

class ApiEndpointCreateRequest(BaseModel):
    """
    ApiEndpointCreateRequest
    """ # noqa: E501
    path: Annotated[str, Field(min_length=1, strict=True, max_length=1024)] = Field(description="The path of the API endpoint.")
    method: ApiMethod = Field(description="The method of the API endpoint.")
    parameters: Optional[List[Dict[str, Any]]] = None
    request_body: Optional[Dict[str, Any]] = None
    success_response: Optional[Dict[str, Any]] = None
    description: Annotated[str, Field(min_length=1, strict=True)] = Field(description="The description of the API endpoint.")
    security_scheme: Optional[List[StrictStr]] = Field(default=None, description="The security scheme of the API endpoint.")
    __properties: ClassVar[List[str]] = ["path", "method", "parameters", "request_body", "success_response", "description", "security_scheme"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApiEndpointCreateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if parameters (nullable) is None
        # and model_fields_set contains the field
        if self.parameters is None and "parameters" in self.model_fields_set:
            _dict['parameters'] = None

        # set to None if request_body (nullable) is None
        # and model_fields_set contains the field
        if self.request_body is None and "request_body" in self.model_fields_set:
            _dict['request_body'] = None

        # set to None if success_response (nullable) is None
        # and model_fields_set contains the field
        if self.success_response is None and "success_response" in self.model_fields_set:
            _dict['success_response'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApiEndpointCreateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "path": obj.get("path"),
            "method": obj.get("method"),
            "parameters": obj.get("parameters"),
            "request_body": obj.get("request_body"),
            "success_response": obj.get("success_response"),
            "description": obj.get("description"),
            "security_scheme": obj.get("security_scheme")
        })
        return _obj


